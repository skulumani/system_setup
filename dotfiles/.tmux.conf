# set default shell to zsh
# set-option -g default-shell /usr/bin/zsh
set -g default-terminal "xterm-256color"
setw -g aggressive-resize on

set-option -ga terminal-overrides ",xterm-256color:Tc"
# unbind C-b
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# mouse select pane
set -g mouse on
set-window-option -g mode-keys vi
# set -g mode-mouse on # for older version of tmux

# no delay for pressing escape
set -sg escape-time 0
# reload config file (change file location to your the tmux.conf you want to use)
bind r source-file ~/.tmux.conf; display-message "~/.tmux.conf is reloaded!"

# move the current window to the left or right
bind-key S-Left swap-window -t -1
bind-key S-Right swap-window -t +1
# set-option -g history-limit 4000

# Start numbering at 1
set -g base-index 1

# Focus events for vim
set -g focus-events on

# ###############################################################################
# # Main/general configuration
# ###############################################################################

# # Change Ctrl-b to Ctrl-a
# unbind C-b
# set -g prefix C-a

# # Copy CLIPBOARD to tmux paste buffer and paste tmux paste buffer
# bind C-S-c run "tmux save-buffer - | xclip -i -selection clipboard"
# bind C-S-v run "tmux set-buffer -- \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"

# # Speed up the escape time
# set -sg escape-time 0

# # Use vim keybindings in copy mode
# set -g mode-keys vi

# # Remap the copy & paste keys to work as in vim
# unbind [
# bind Escape copy-mode
# unbind p
# bind p paste-buffer
# bind -t vi-copy 'v' begin-selection
# bind -t vi-copy 'y' copy-selection

# # Y yanks to system clipboard
# bind -t vi-copy 'Y' copy-pipe 'xclip -in -selection clipboard'

# # For nested tmux, C-a twice to send prefix to nested session
# bind-key C-a send-prefix

# # Fix the ctrl left/right keys for word traversal
# set-window-option -g xterm-keys on
# set -g default-terminal "screen-256color"
# ###############################################################################
# # Mouse mode configuration
# ###############################################################################

# set -g mouse on
# # Toggle mouse on with ^B m
# bind m \
#   set -g mouse on \;\
#   display 'Mouse: ON'

# # Toggle mouse off with ^B M
# bind M \
#   set -g mouse off \;\
#   display 'Mouse: OFF'

# set -g scroll-speed-num-lines-per-scroll 1
# ###############################################################################
# # Pane configuration
# ###############################################################################

# Change traversal to hjkl
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# # Split pane in current directory, but not new windows
# bind v split-window -h -c "#{pane_current_path}"
# bind % split-window -h -c "#{pane_current_path}"
# bind s split-window -c "#{pane_current_path}"
# bind '"' split-window -c "#{pane_current_path}"
# bind c new-window -c "$PWD"

# split panes with | and -
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Resize panes easily, but not so that you do it accidentally when switching
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# # Smart pane switching with awareness of vim splits
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Start Python window setup
bind P source-file ~/.tmux/python

# Vim/Neovim session saving
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'

# ###############################################################################
# # Window configuration
# ###############################################################################

# # Alt + # window switching
# # Most linux terminal emulators need to be told not to steal alt
# bind-key -n M-1 select-window -t 1
# bind-key -n M-2 select-window -t 2
# bind-key -n M-3 select-window -t 3
# bind-key -n M-4 select-window -t 4
# bind-key -n M-5 select-window -t 5
# bind-key -n M-6 select-window -t 6
# bind-key -n M-7 select-window -t 7
# bind-key -n M-8 select-window -t 8
# bind-key -n M-9 select-window -t 9

# # Automatically renumber windows
# bind R move-window -r;

# # Bind X to kill window, x to kill pane
# bind x confirm kill-pane
# bind X confirm kill-window

# # Start numbering at 1
# set -g base-index 1

# # Window swapping
# bind-key < swap-window -t -
# bind-key > swap-window -t +

# # Automatically renumber windows
# set-option -g renumber-windows on

# ###############################################################################
# # Command Aliases  
# ###############################################################################
# bind-key n command-prompt "rename-window %%"

# ###############################################################################
# # Status Bar configuration
# ###############################################################################
# set -g @themepack 'powerline/double/blue'
# alert to activity
# setw -g monitor-activity on
# set -g visual-activity on
# set -g status-right '#{cpu_bg_color} CPU: #{cpu_icon} #{cpu_percentage}'

# Renaming of window titles
# set-window-option -g automatic-rename off
# set-option -g allow-rename off
if-shell "test -f $HOME/.tmux/tmuxline_snapshot.txt" "source $HOME/.tmux/tmuxline_snapshot.txt"
#############################################
# PLUGINS
# ############################################
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'jimeh/tmux-themepack'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-sidebar'
# set -g @plugin 'odedlaz/tmux-onedark-theme'

# Initialize TMUX plugin manager
run '~/.tmux/plugins/tpm/tpm'
