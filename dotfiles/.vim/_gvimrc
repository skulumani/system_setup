filetype plugin indent on
syntax on
set nocompatible
set autoindent
set modeline " disable modeline vulnerability
" text encoding
set encoding=utf8

" directories for swap files and things
set backupdir=~\_vim\backup
set directory=~\_vim\swap\
set undodir=~\_vim\undo\

" use 4 spaces for tabs
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround

set backspace =indent,eol,start
set hidden
set laststatus =2

" Set linenumbers
set number
set relativenumber
" automatically switch to absolute line numbers when losing focus
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup END

set wrap

" column ruler at 100
set ruler
set colorcolumn=80

set lazyredraw " for faster scrolling

" minimum window size
" set winwidth=85
"set winheight=5
" set winminheight=5

" Keep x lines below and above the cursor
set scrolloff=5 
set sidescroll=1
set sidescrolloff=15

" Folding in Vim
set foldmethod=syntax

" set foldclose=all
set foldnestmax=3
set nofoldenable

" finding files in vim
set path+=**
set wildchar=<Tab> wildmenu wildmode=full
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=*.swp,*~,._*

set showtabline=2  " Show tabline
set guioptions-=e  " Don't use GUI tabline

" opening new buffers
set switchbuf=usetab
" Highlight searching
set incsearch
set showmatch
set hlsearch
set ignorecase
set smartcase
if has("nvim")
    set inccommand="nosplit"
endif
set complete-=i
" set completeopt+=preview

" matchparen options
let g:matchparen_timeout = 20
let g:matchparen_insert_timeout = 20

set autoread " autoread files
augroup autoread_files
    autocmd!
    " Triger `autoread` when files changes on disk
    " https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
    " https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
    " Notification after file change
    " https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
    autocmd FileChangedShellPost *
                \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
augroup END


set mouse=n " use mouse for scroll or window size

" KEYBOARD MAPPINGS
" Leader key goes to space
let mapleader=' '
let maplocalleader=' '
" Press Space to turn off highlighting and clear any message already displayed.
nnoremap <silent> <leader>h :nohlsearch<Bar>:echo<CR>
" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" now we can scroll through a big wrapped line more easily
nnoremap j gj
nnoremap k gk

" autocenter on matched strings
noremap n nzz
noremap N Nzz

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Use ctags
" command! MakeTags !ctags -R .

" Use Netrw instead for speed
map <C-n> :NERDTreeToggle<CR>
" map <C-n> :Vex<CR>

nnoremap <leader>ev :e ~\_gvimrc<CR>
nnoremap <leader>sv :so ~\_gvimrc<CR>

" nnoremap <leader>w :write<CR> :echo "Saved file!"<CR>
" FZF mappings
" <C-p> or <C-t> to search files
nnoremap <silent> <leader>ft :CtrlPTag <cr>
nnoremap <silent> <leader>ff :CtrlP <cr>
nnoremap <silent> <leader>fa :Rg <CR>
" search commits
nnoremap <silent> <leader>fc :Commits <CR> 
" Search for all keyboard mappings
nnoremap <silent> <leader>fm :Maps <CR>
" <M-p> for open buffers
nnoremap <silent> <leader>fb :CtrlPBuffer<cr>
" <M-S-p> for MRU
nnoremap <silent> <leader>fh :History<cr>

" nnoremap <leader>s :set spell!<CR>
set spelllang=en_us

" tagbar
" nmap <leader>lg :set list!<CR> <bar> :IndentLinesToggle<CR> <bar> :LeadingSpaceToggle<CR>

" delete a buffer without closing split
" command Bd bp\|bd \#
nnoremap <leader>bd :bp<CR>:bd #<CR> 
" Delete all trailing whitespace with F5
" nnoremap <silent> <F5> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" Vim-Easy Align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Fugitive stuff
" if has("autocmd")
"     autocmd BufReadPost fugitive://* set bufhidden=delete
"     autocmd User fugitive 
"                 \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
"                 \   nnoremap <buffer> .. :edit %:h<CR> |
"                 \ endif
" endif

nnoremap <leader>gst :Gstatus<cr>gg<C-n>
nnoremap <leader>gc :Gcommit -v -q<CR>
nnoremap <leader>gf :Gcommit -v -q %:p<CR>i
" nnoremap <leader>gt :Git tag -s<Space>
nnoremap <leader>gco :Git checkout<Space>
nnoremap <leader>gb :Git branch<Space>
nnoremap <leader>gp :Gpush<CR>
nnoremap <leader>gl :Gpull<CR>
nnoremap <leader>gd :Gdiff :0<CR>
nnoremap <leader>ge :Gedit <CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>glg :Git lg<CR>
nnoremap <leader>glg2 :Git lg2<CR>
nnoremap <leader>gm :Git merge --no-ff<Space> 

xnoremap dp :diffput<CR>
xnoremap do :diffget<CR>

xnoremap <leader>du :diffupdate<CR>

" Todo.txt mappings
nnoremap <leader>td :e ~/_todo/todo.txt<CR>

" Search for todo or bug or fixme using AG
nnoremap <leader>fix :Ack \(FIXME\)\\|\(TODO\)\\|\(BUG\)<CR>

" Remap ESC for terminal window this will break the FZF windows
" tnoremap <Esc> <C-\><C-n>
"
" Neomake commands
if has('nvim')
    nnoremap <leader>m :Neomake<CR> :echo "LINTING!"<CR>
endif

augroup cpp_make
    autocmd!
    autocmd FileType cpp nnoremap <buffer> <leader>ll :Make -C build -j4<CR> :echo "MAKING!"<CR>
augroup END

" Options for vim-easy-align
vmap <Enter> <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Plugins
call plug#begin('C:\vimfiles\plugged')
" Productivity
Plug 'junegunn/vim-plug'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-dispatch'
Plug 'freitass/todo.txt-vim'
Plug 'scrooloose/nerdtree', { 'on' : 'NERDTreeToggle' }
Plug 'andymass/vim-matchup'
Plug 'machakann/vim-sandwich'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tdehaeze/matlab-vim'

" Appearance
Plug 'itchyny/lightline.vim'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'sheerun/vim-polyglot'
Plug 'machakann/vim-highlightedyank' " highlight yanked text
Plug 'ryanoasis/vim-devicons'
" Plug 'chriskempson/base16-vim'

" Programming plugins
Plug 'lervag/vimtex'
Plug 'ludovicchabant/vim-gutentags'
" Plug 'Yggdroot/indentLine'
Plug 'Konfekt/FastFold'

Plug 'tpope/vim-commentary'
Plug 'junegunn/vim-easy-align'


call plug#end()

set guifont=SourceCodePro_Nerd_Font_Mono:h12:cANSI:qDRAFT
set background=dark
let g:onedark_termcolors=16
colorscheme onedark

" base16 vim
" if filereadable(expand("~/.vimrc_background"))
"     " let base16colorspace=256
"     source ~/.vimrc_background
" endif

" vim-airline theme
let g:airline_theme='solarized'
let g:airline#extensions#tabline#enabled = 1
let g:arline#extensions#tabline#show_buffers = 1
let g:airline_powerline_fonts = 1

function! LightlineObsession()
    return '%{ObsessionStatus(''S'', '''')}'
endfunction

function! LightlineTags()
    return '%{gutentags#statusline()}'
endfunction

" lightline settings
let g:lightline = {
  \   'colorscheme': 'wombat',
  \   'active': {
  \     'left':[ [ 'mode', 'paste' ],
  \              [ 'gitbranch', 'readonly', 'filename', 'modified', ]
  \     ],
    \  'right': [
    \ [ 'lineinfo' ], [ 'percent' ], 
    \ [ 'fileformat' , 'fileencoding' , 'filetype' ] ]
  \   },
    \ 'inactive' : {
    \   'left': [ [ 'filename', 'modified' ] ]
    \ },
	\   'component': {
	\     'lineinfo': ' %3l:%-2v',
    \     'helloworld': 'Hello, world',
	\   },
  \   'component_function': {
  \     'gitbranch': 'fugitive#head',
  \   },
    \ 'component_expand': {
    \   'obsession': 'LightlineObsession',
    \   'tags' : 'LightlineTags'
    \   }
  \ }
let g:lightline.separator = {
	\   'left': '', 'right': ''
  \}
let g:lightline.subseparator = {
	\   'left': '', 'right': '' 
  \}

let g:lightline.tabline = {
  \   'left': [ ['tabs'] ],
  \   'right': [ [ 'close', 'obsession', 'tags'] ]
  \ }
