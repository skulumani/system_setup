_gen_fzf_default_opts() {
    local base03="234"
        local base02="235"
        local base01="240"
        local base00="241"
        local base0="244"
        local base1="245"
        local base2="254"
        local base3="230"
        local yellow="136"
        local orange="166"
        local red="160"
        local magenta="125"
        local violet="61"
        local blue="33"
        local cyan="37"
        local green="64"

# Comment and uncomment below for the light theme.

# Solarized Dark color scheme for fzf
    export FZF_DEFAULT_OPTS="
        --height 30% --reverse --border --inline-info
        --color fg:-1,bg:-1,hl:$blue,fg+:$base2,bg+:$base02,hl+:$blue
        --color info:$yellow,prompt:$yellow,pointer:$base3,marker:$base3,spinner:$yellow
        "
}
_gen_fzf_default_opts

export FZF_DEFAULT_COMMAND='ag --hidden -g ""'
export FZF_TMUX=1
# FZF commands #######################33
# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
    local files
        IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
        [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fo() {
    local out file key
        IFS=$'\n' out=($(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e))
        key=$(head -1 <<< "$out")
        file=$(head -2 <<< "$out" | tail -1)
        if [ -n "$file" ]; then
            [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
                fi
}

# vf - fuzzy open with vim from anywhere
# ex: vf word1 word2 ... (even part of a file name)
# zsh autoload function
vf() {
    local files

        files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})

        if [[ -n $files ]]
            then
                vim -- $files
                print -l $files[1]
                fi
}

# cf - fuzzy cd from anywhere
# ex: cf word1 word2 ... (even part of a file name)
# zsh autoload function
cf() {
    local file

        file="$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1)"

        if [[ -n $file ]]
            then
                if [[ -d $file ]]
                    then
                        cd -- $file
                else
                    cd -- ${file:h}
    fi
        fi
}

# fdr - cd to selected parent directory
fdr() {
    local declare dirs=()
        get_parent_dirs() {
            if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
                if [[ "${1}" == '/' ]]; then
                    for _dir in "${dirs[@]}"; do echo $_dir; done
                else
                    get_parent_dirs $(dirname "$1")
                        fi
        }
    local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
        cd "$DIR"
}

# fda - including hidden directories
fda() {
    local dir
        dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# fd - cd to selected directory
fd() {
    local dir
        dir=$(find ${1:-.} -path '*/\.*' -prune \
                -o -type d -print 2> /dev/null | fzf +m) &&
        cd "$dir"
}

# fh - repeat history
fh() {
    eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# fkill - kill process
fkill() {
    local pid
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

        if [ "x$pid" != "x" ]
            then
                echo $pid | xargs kill -${1:-9}
    fi
}

# fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
fbr() {
    local branches branch
        branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
        branch=$(echo "$branches" |
                fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
        git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fco - checkout git branch/tag
fco() {
    local tags branches target
        tags=$(
                git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
        branches=$(
                git branch --all | grep -v HEAD             |
                sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
                sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
        target=$(
                (echo "$tags"; echo "$branches") |
                fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
        git checkout $(echo "$target" | awk '{print $2}')
}


# fcoc - checkout git commit
fcoc() {
    local commits commit
        commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
        commit=$(echo "$commits" | fzf --tac +s +m -e) &&
        git checkout $(echo "$commit" | sed "s/ .*//")
}
