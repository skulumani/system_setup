# vim: syn=sh 

_gen_fzf_default_opts() {
    local color00='#002b36'
local color01='#073642'
local color02='#586e75'
local color03='#657b83'
local color04='#839496'
local color05='#93a1a1'
local color06='#eee8d5'
local color07='#fdf6e3'
local color08='#dc322f'
local color09='#cb4b16'
local color0A='#b58900'
local color0B='#859900'
local color0C='#2aa198'
local color0D='#268bd2'
local color0E='#6c71c4'
local color0F='#d33682'

export FZF_DEFAULT_OPTS="
  --height 40% --border --reverse --inline-info
  --color=bg+:$color01,bg:$color00,spinner:$color0C,hl:$color0D
  --color=fg:$color04,header:$color0D,info:$color0A,pointer:$color0C
  --color=marker:$color0C,fg+:$color06,prompt:$color0A,hl+:$color0D
"
}
_gen_fzf_default_opts

# logic to check if on linux
if [ "$OSTYPE" = "linux-gnu" ]; then
    export FZF_DEFAULT_COMMAND='rg --files --hidden --no-ignore --follow --glob "!.git/*"'
else
    export FZF_DEFAULT_COMMAND='rg --files --hidden --no-ignore --follow --glob "!.git/*"'
fi

# export FZF_DEFAULT_COMMAND='ag --path-to-ignore "~/.agignore" --skip-vcs-ignores --hidden -g ""'
# _fzf_compgen_paths() {
#    ag --path-to-ignore "~/.agignore" --skip-vcs-ignores --hidden -g "" "$1"
#}

# complete -F _fzf_path_completion -o default -o bashdefault ag
# complete -F _fzf_dir_completion -o default -o bashdefault tree

export FZF_TMUX=1
export FZF_COMPLETION_TRIGGER=''
if [ -n "$ZSH_VERSION" ]; then
    bindkey '^T' fzf-completion
    bindkey '^I' $fzf_default_completion
fi
# FZF commands #######################33
# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
# fe() {
#     local files
#         IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
#         [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
# }

# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fo() {
    local out file key
        IFS=$'\n' out=($(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e))
        key=$(head -1 <<< "$out")
        file=$(head -2 <<< "$out" | tail -1)
        if [ -n "$file" ]; then
            [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
        fi
}

# vf - fuzzy open with vim from anywhere
# ex: vf word1 word2 ... (even part of a file name)
# zsh autoload function
#
vf() {
    local files

        files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})

        if [[ -n $files ]]
            then
                nvim -- $files
                print -l $files[1]
                fi
}

# cf - fuzzy cd from anywhere
# ex: cf word1 word2 ... (even part of a file name)
# zsh autoload function
cf() {
    local file

        file="$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1)"

        if [[ -n $file ]]
            then
                if [[ -d $file ]]
                    then
                        cd -- $file
                else
                    cd -- ${file:h}
    fi
        fi
}

# fdr - cd to selected parent directory
fdr() {
    local declare dirs=()
        get_parent_dirs() {
            if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
                if [[ "${1}" == '/' ]]; then
                    for _dir in "${dirs[@]}"; do echo $_dir; done
                else
                    get_parent_dirs $(dirname "$1")
                        fi
        }
    local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
        cd "$DIR"
}

# fda - including hidden directories
fda() {
    local dir
        dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# fd - cd to selected directory
fd() {
    local dir
        dir=$(find ${1:-.} -path '*/\.*' -prune \
                -o -type d -print 2> /dev/null | fzf +m) &&
        cd "$dir"
}

# fh - repeat history
fh() {
    eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# fkill - kill process
fkill() {
    local pid
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

        if [ "x$pid" != "x" ]
            then
                echo $pid | xargs kill -${1:-9}
    fi
}

# fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
fbr() {
    local branches branch
        branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
        branch=$(echo "$branches" |
                fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
        git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fco - checkout git branch/tag
fco() {
    local tags branches target
        tags=$(
                git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
        branches=$(
                git branch --all | grep -v HEAD             |
                sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
                sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
        target=$(
                (echo "$tags"; echo "$branches") |
                fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
        git checkout $(echo "$target" | awk '{print $2}')
}


# fcoc - checkout git commit
fcoc() {
    local commits commit
        commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
        commit=$(echo "$commits" | fzf --tac +s +m -e) &&
        git checkout $(echo "$commit" | sed "s/ .*//")
}
