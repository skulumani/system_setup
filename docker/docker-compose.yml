version: '3'
services:

  homeassistant:
    container_name: homeassistant
    image: ghcr.io/home-assistant/home-assistant:latest
    # devices:
      # - /dev/ttyUSB0:/dev/ttyUSB0
    volumes:
      - /home/shankar/Documents/system_setup/homeassistant:/config
      - /tmp:/tmp
      - /var/run/docker.sock:/var/run/docker.sock
      - /media/shankar/usbdrive/video:/media/camera
      - /media/shankar/usbdrive/frigate:/media/frigate
      - /media/shankar/data:/media/data
      # - /etc/localtime:/etc/localtime:ro
    ports:
      - "8123:8123"
    # privileged: true
    environment:
      - TZ=America/New_York
    restart: always
    network_mode: host
   # user: "1000:1000"
    depends_on:
      - signal-cli-rest-api
      - mariadb_homeassistant
      - deconz
      - influxdb

  mariadb_homeassistant:
    image: mariadb
    container_name: mariadb_homeassistant
    ports:
      - 3310:3306
    volumes:
      - homeassistant_db:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: "2PtZXpJDDjSGsv"
      MYSQL_PASSWORD: "2PtZXpJDDjSGsv"
      MYSQL_DATABASE: homeassistant
      MYSQL_USER: homeassistant
    # user: "1000:1000"
    restart: always

  signal-cli-rest-api:
    container_name: signalcli
    image: bbernhard/signal-cli-rest-api:latest
    environment:
      - MODE=json-rpc
      # - AUTO_RECEIVE_SCHEDULE=0 22 * * *
    ports:
      - "8080:8080" # map docker port 8080 to host port 8080.
    network_mode: "host"
    restart: always
    # user: "1000:1000"
    volumes:
      - signal_data:/home/.local/share/signal-cli # map "signal-cli-config" folder 
      - "/media/shankar/usbdrive/video:/media/camera"
  
  omada-controller:
    container_name: omada-controller
    image: mbentley/omada-controller:latest
    restart: always
    network_mode: "host"
    # user: "1000:1000"
    environment:
      - TZ=America/New_York
      - MANAGE_HTTP_PORT=8088
      - MANAGE_HTTPS_PORT=8043
      - PORTAL_HTTP_PORT=8088
      - PORTAL_HTTPS_PORT=8843
    volumes:
      - omada-data:/opt/tplink/EAPController/data
      - omada-work:/opt/tplink/EAPController/work
      - omada-logs:/opt/tplink/EAPController/logs
  # glances:
  #   container_name: glances
  #   image: nicolargo/glances:latest-alpine
  #   restart: always
  #   pid: host
  #   network_mode: host
  #   ports:
  #     - "61208:61208"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - "GLANCES_OPT=-w"
  #


  # Deconz
  deconz:
    container_name: deconz
    image: marthoc/deconz
    restart: always
    network_mode: host
    environment:
      # You can access Deconz at this port
      DECONZ_WEB_PORT: 44449
      DECONZ_WS_PORT: 44448

      # Set VNC_MODE to 0 to disable it completely
      DECONZ_VNC_MODE: 1
      DECONZ_VNC_PORT: 44447
      DECONZ_VNC_PASSWORD: "password"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      # Replace <local path> with a path where all deconz config will be stored.
      - /home/shankar/Documents/deconz:/root/.local/share/dresden-elektronik/deCONZ
    devices:
      - "/dev/ttyACM0:/dev/ttyACM0"

  mosquitto:
    image: eclipse-mosquitto
    hostname: mosquitto
    restart: always
    container_name: mosquitto
    # network_mode: host
    ports:
      - "1883:1883"
      - "9001:9001"
    user: "1000:1000"
    volumes: 
      - /home/shankar/Documents/system_setup/docker_data/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log

  # Example Docker Compose config file for PhotoPrism (Linux / AMD64)
#
# Documentation : https://docs.photoprism.org/getting-started/docker-compose/
# Docker Hub URL: https://hub.docker.com/r/photoprism/photoprism/
#
# Please run behind a reverse proxy like Caddy, Traefik or Nginx if you need HTTPS / SSL support
# e.g. when running PhotoPrism on a public server outside your home network.
#
# ------------------------------------------------------------------
# DOCKER COMPOSE COMMAND REFERENCE
# ------------------------------------------------------------------
# Start    | docker-compose up -d
# Stop     | docker-compose stop
# Update   | docker-compose pull
# Logs     | docker-compose logs --tail=25 -f
# Terminal | docker-compose exec photoprism bash
# Help     | docker-compose exec photoprism photoprism help
# Config   | docker-compose exec photoprism photoprism config
# Reset    | docker-compose exec photoprism photoprism reset
# Backup   | docker-compose exec photoprism photoprism backup -a -i
# Restore  | docker-compose exec photoprism photoprism restore -a -i
# Index    | docker-compose exec photoprism photoprism index
# Reindex  | docker-compose exec photoprism photoprism index -a
# Import   | docker-compose exec photoprism photoprism import
# -------------------------------------------------------------------
# Note: All commands may have to be prefixed with "sudo" when not running as root.
#       This will change the home directory "~" to "/root" in your configuration.
#
  photoprism:
    # Use photoprism/photoprism:preview instead for testing preview builds:
    image: photoprism/photoprism:latest
    container_name: photoprism
    # Only enable automatic restarts once your installation is properly
    # configured as it otherwise may get stuck in a restart loop:
    # https://docs.photoprism.org/getting-started/faq/#why-is-photoprism-getting-stuck-in-a-restart-loop
    # restart: unless-stopped
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    ports:
      - 2342:2342 # [local port]:[container port]
    restart: always
    environment:
      PHOTOPRISM_ADMIN_PASSWORD: "insecure"          # PLEASE CHANGE: Your initial admin password (min 4 characters)
      PHOTOPRISM_ORIGINALS_LIMIT: 5000               # File size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # Improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_DEBUG: "false"                      # Run in debug mode (shows additional log messages)
      PHOTOPRISM_PUBLIC: "true"                     # No authentication required (disables password protection)
      PHOTOPRISM_READONLY: "false"                   # Don't modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # Enables experimental features
      PHOTOPRISM_DISABLE_WEBDAV: "true"             # Disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # Disables Settings in Web UI
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # Disables using TensorFlow for image classification
      PHOTOPRISM_DARKTABLE_PRESETS: "false"          # Enables Darktable presets and disables concurrent RAW conversion
      PHOTOPRISM_DETECT_NSFW: "false"                # Flag photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # Allow uploads that MAY be offensive
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # Use MariaDB (or MySQL) instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "192.168.88.12:3311"     # MariaDB database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism"         # MariaDB database schema name
      PHOTOPRISM_DATABASE_USER: "photoprism"         # MariaDB database user name
      PHOTOPRISM_DATABASE_PASSWORD: "insecure"       # MariaDB database user password
      PHOTOPRISM_SITE_URL: "http://192.168.88.12:2342/"  # Public PhotoPrism URL
      PHOTOPRISM_SITE_TITLE: "PhotoPrism"
      PHOTOPRISM_SITE_CAPTION: "Browse Your Life"
      PHOTOPRISM_SITE_DESCRIPTION: ""
      PHOTOPRISM_SITE_AUTHOR: ""
      PHOTOPRISM_WORKERS: 2       # Max number of index workers
      PHOTOPRISM_JPEG_QUALITY: 80   # JPEG Quality
      PHOTOPRISM_THUMB_SIZE: 720
      PHOTOPRISM_THUMB_SIZE_UNCACHED: 720
      PHOTOPRISM_JPEG_SIZE: 720
      PHOTOPRISM_THUMB_UNCACHED: "true"
      # You may optionally set a user / group id using environment variables if your Docker version or NAS does not
      # support this natively (see next example):
      # UID: 1000
      # GID: 1000
      # UMASK: 0000
    # Uncomment and edit the following line to set a specific user / group id (native):
    user: "1000:1000"
    volumes:
      # Your photo and video files ([local path]:[container path]):
      - "/media/shankar/data/pictures/originals:/photoprism/originals"
      # Multiple folders can be indexed by mounting them as sub-folders of /photoprism/originals:
      # - "/mnt/Family:/photoprism/originals/Family"    # [folder_1]:/photoprism/originals/[folder_1]
      # - "/mnt/Friends:/photoprism/originals/Friends"  # [folder_2]:/photoprism/originals/[folder_2]
      # Mounting an import folder is optional (see docs):
      - "/media/shankar/data/pictures/import:/photoprism/import"
      # Permanent storage for settings, index & sidecar files (DON'T REMOVE):
      - photoprism_storage:/photoprism/storage
    depends_on:
      - photoprism_db

  photoprism_db:
    image: mariadb:10.5
    container_name: photoprism_db
    restart: always
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: mysqld --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=50
    volumes: # Don't remove permanent storage for index database files!
      - photoprism_db_storage:/var/lib/mysql
    ports:
      - 3311:3306
    environment:
      MYSQL_ROOT_PASSWORD: please_change
      MYSQL_DATABASE: photoprism
      MYSQL_USER: photoprism
      MYSQL_PASSWORD: insecure

  # photoview_db:
  #   container_name: photoview_db
  #   image: mariadb:10.5
  #   restart: always
  #   environment:
  #     - MYSQL_DATABASE=photoview
  #     - MYSQL_USER=photoview
  #     - MYSQL_PASSWORD=photosecret
  #     - MYSQL_RANDOM_ROOT_PASSWORD=1
  #   volumes:
  #     - db_data:/var/lib/mysql

  # photoview:
  #   image: viktorstrate/photoview:latest
  #   container_name: photoview
  #   restart: always
  #   ports:
  #     - "8000:80"
  #   depends_on:
  #     - photoview_db

  #   environment:
  #     - PHOTOVIEW_DATABASE_DRIVER=mysql
  #     - PHOTOVIEW_MYSQL_URL=photoview:photosecret@tcp(photoview_db)/photoview
  #     - PHOTOVIEW_LISTEN_IP=photoview
  #     - PHOTOVIEW_LISTEN_PORT=80
  #     - PHOTOVIEW_MEDIA_CACHE=/app/cache
  #     - PHOTOVIEW_PUBLIC_ENDPOINT=http://192.168.88.12:8000
  #     # Optional: To enable map related features, you need to create a mapbox token.
  #     # A token can be generated for free here https://account.mapbox.com/access-tokens/
  #     # It's a good idea to limit the scope of the token to your own domain, to prevent others from using it.
  #     - MAPBOX_TOKEN=pk.eyJ1IjoiY29tcGFuaW9uLWdhbGxlcnkiLCJhIjoiY2tsdG4zZXluMXRzNTJvbGJ1dnJ3dHc4dSJ9.BhCbQ982RogUC1s6UJ9KhQ

  #   volumes:
  #     - api_cache:/app/cache

  #     # Change This: to the directory where your photos are located on your server.
  #     # If the photos are located at `/home/user/photos`, then change this value
  #     # to the following: `/home/user/photos:/photos:ro`.
  #     # You can mount multiple paths, if your photos are spread across multiple directories.
  #     - /media/shankar/data/pictures:/photos:ro
  
  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: always
    ports:
      - 8086:8086
    volumes:
      - /home/shankar/Documents/influxdb/data/:/var/lib/influxdb2
      - /home/shankar/Documents/system_setup/docker_data/influxdb/config/:/etc/influxdb2
      - /home/shankar/Documents/influxdb_backup/:/var/backups

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - 3000:3000
    volumes:
      - grafana-storage:/var/lib/grafana
      - /home/shankar/Documents/system_setup/docker_data/grafana-provisioning/:/etc/grafana/provisioning
    depends_on:
      - influxdb
    environment: 
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_AUTH_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ALLOW_EMBEDDING=true


  frigate:
    container_name: frigate
    # privileged: true # this may not be necessary for all setups
    image: blakeblackshear/frigate:stable-amd64
    restart: always
    shm_size: '125mb'
    devices:
      - /dev/bus/usb:/dev/bus/usb # for coral devices
      - /dev/dri/renderD128 # for intel hwaccel, needs to be updated for your hardware
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /home/shankar/Documents/system_setup/docker_data/frigate/config.yml:/config/config.yml:ro
      - /media/shankar/usbdrive/frigate:/media/frigate
      - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear
        target: /tmp/cache
        tmpfs:
          size: 1000000000
    ports:
      - '5000:5000'
      - '1935:1935' # RTMP feeds
    environment:
      FRIGATE_FRONT_CAM_IP: "192.168.200.15"
      FRIGATE_BACK_CAM_IP: "192.168.200.16"
      FRIGATE_CAM_PASSWORD: "dgdiPUdFwqkqBwRFSq"
      FRIGATE_CAM_USERNAME: "stream"

  # motioneye:
  #   image: ccrisan/motioneye:master-amd64  # Change to ccrisan/motioneye:master-armhf for ARM chips (Pi etc.)
  #   container_name: motioneye
  #   ports:
  #     - "8081:8081" # front low
  #     - "8082:8082" # front high
  #     - "8083:8083" # back low
  #     - "8084:8084" # back high
  #     - "8765:8765" # motioneye web
  #   volumes:
  #     - /home/shankar/Documents/system_setup/docker_data/motioneye:/etc/motioneye
  #     - /media/shankar/usbdrive:/var/lib/motioneye/usbdrive
  #     - /home/shankar/Videos:/var/lib/motioneye/videos
  #     - /tmp:/var/lib/motioneye/temp
  #   restart: always
  #   environment:
  #     - TZ=America/New_York

  # watchtower:
  #   image: containrrr/watchtower
  #   container_name: watchtower
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /root/.docker/config.json:/config.json
  #     - /etc/timezone:/etc/timezone:ro
  #   command: --cleanup --interval 43200

volumes:
  omada-data:
  omada-work:
  omada-logs:
  mosquitto_data:
  mosquitto_log:
  grafana-storage:
  
  # photoview data
  db_data:
  api_cache:

  # photoprism
  photoprism_storage:
  photoprism_db_storage:

  # signal-cli-config
  signal_data:

  # move other volumes to these controlled by docker
  # deconz
  # deconz_data:

  # # grafana
  # grafana_data:

  # mariadb_homeassistant
  homeassistant_db:

  # # influxdb_config
  # influxdb_config:
  
  # # influxdb_data
  # influxdb_data:

